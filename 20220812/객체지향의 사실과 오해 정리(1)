행동에 따라 객체를 분류하기 위해서는 객체가 내부적으로 관리해야하는 데이터가 아니라 객체가 외부에 제공해야 하는 행동을 먼저 생각해야 한다. 
이를 위해서는 객체가 외부에 제공해야 하는 책임을 먼저 결정하고 그 책임을 수행하는 데 적합한 데이터를 나중에 결정한 후, 데이터를 책임을 수행하는 데 필요한 외부 인터페이스 뒤로 캡슐화해야 한다. 
데이터를 먼저 결정하고 객체의 책임을 결정하는 방법은 유연하지 못한 설계라는 악몽을 초래한다.


* 객체의 역할
  - 여러 객체가 동일한 역할을 수행할 수 있다.
  - 역할은 대체 가능성을 의미한다.
  - 각 객체는 책임을 수행하는 방법을 자율적으로 선택할 수 있다.
  - 하나의 객체가 동시에 여러 역할을 수행할 수 있다.

협력 공동체의 일원으로서 객체는 다음과 같은 두 가지 덕목을 갖춰야 하며, 두 덕목 사이에서 균형을 유지해야 한다.
1. 객체는 충분히 '협력젹'이어야 한다.
2. 객체는 충분히 '자율적'이어야 한다.

* 객체지향의 본질
  - 객체지향이란 시스템을 상호작용하는 자율적인 객체들의 공동체로 바라보고 객체를 이용해 시스템을 분할하는 방법이다.
  - 자율적인 객체란 상태와 행위를 함꼐 지니며 스스로 자기 자신을 책임지는 객체를 의미한다.
  - 객체는 시스템으 ㅣ행위를 구현하기 위해 다른 객체와 협력한다. 각 객체는 협력 내에서 정해진 역할을 수행하며 역할은 관련된 책임의 집합이다.
  - 객체는 다른 객체와 협력하기 위해 메시지를 전송하고, 메시지를 수신한 객체는 메시지를 처리하는 데 적합한 메서드를 자율적으로 선택한다.

객체의 다양한 특성을 효과적으로 설명하기 위해서 객체를 상태(state), 행동(behavior), 식별자(identity)를 지닌 실체로 보는것이 가장 효과적

객체란 식별 가능한 개체 또는 사물이다. 객체는 자동차처럼 만질 수 있는 구체적인 사물일 수 도 있고, 시간처럼 추상적인 개념일 수 도 있다. 객체는 구별가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가진다. 소프트웨어 안에서 객체는 저장된 상태와 실행 가능한 코드를 통해 구현된다. 

결론적으로 모든 객체의 상태는 단순한 값과 객체의 조합으로 표현할 수 있다. 이때 객체의 상태를 구성하는 모든 특징을 통틀어 객체의 프로퍼티(property)라고 한다/
- 일반적으로 프로퍼티는 변경되지 않고 고정되기 때문에 '정적'이다.
- 반면, 프로퍼티 값(property value)은 시간이 흐름에 따라 변경되기 때문에 '동적'이다.


객체와 객체 사이의 의미있는 연결을 링크(link)라고 한다. 객체와 객체 사이에는 링크가 존재해야만 요청을 보내고 받을 수 있다.

객체 간의 선으로 표현되는 링크와 달리 객체를 구성하는 단순한 값을 속성(attribute)이라고 한다.

객체의 프로퍼티는 단순한 값인 속성과 다른 객체를 가리키는 링크라는 두 가지 종류의 조합으로 표현할 수 있다. 정확하게 말하면 프로퍼티는 속성과 연관관계의 두 가지 종류로 구분된다. 연관관계는 정적인 관계를 의미하며 링크는 연관관계의 인스턴스다.

상태는 특정 시점에 객체가 가지고 있는 정보의 집합으로 객체의 구조적 특징을 표현한다. 객체의 상태는 객체에 존재하는 정적인 프로퍼티와 동적인 프로퍼티 값으로 구성된다. 객체의 프로퍼티는 단순한 값과 다른 객체를 참조하는 링크로 구분할 수 있다. 

객체가 취하는 행동은 객체 자신의 상태를 변경시킨다. 객체의 행동에 의해 객체의 상태가 변경된다는 것은 행동이 부수 효과(side effect)를 초래한다는 것을 의미한다.

객체의 행동은 객체의 상태를 변경시키지만 행동의 결과는 객체의  상태에 의존적이다.

* 상태와 행동 사이의 관계
  - 객체의 행동은 상태에 영항을 받는다
  - 객체의 행동은 상태를 변경시킨다

* 상태라는 개념을 이용해 행동을 두 가지 관점에서 서술할 수 있음을 의미하는 것
   - 상호작용이 현재의 상태에 어떤 방식으로 의존하는가
   - 상호작용이 어떻게 현재의 상태를 변경시키는가


객체가 다른 객체와 협력하는 유일한 방법은 다른 객체에게 요청을 보내는 것 즉, 다른 개체와 메시지를 통해서만 의사소통 할 수 있다.

* 객체의 행동으로 인해 발생하는 결과를 두 가지 관점에서 설명
  - 객체 자신의 상태 변경
  - 행동 내에서 협력하는 다른 객체에 대한 메시지 전송

행동이란
: 외부의 요청 또는 수신된 메시지에 응답하기 위해 동작하고 반응하는 활동. 행동의 결과로 객체는 자신의 상태를 변경하거나 다른 객체에게 메시지를 전달할 수 있다. 객체는 행동을 통해 다른 객체와의 협렵에 참여하므로 행동은 외부에 가시적이어야 함.


객체는 상태를 캡슐 안에 감춰둔 채 외부로 노출하지 않는다. 객체가 외부에 노출하는 것은 행동 뿐이며, 외부에서 객체에 접근할 수 있는 유일한 방법 역시 행동뿐이다.
상태를 외부에 노출시키지 않고 행동을 경계로 캡슐화하는 것은 결과적으로 객체의 자율성을 높임

결론적으로 상태를 잘 정의된 행동 집합 뒤로 캠슐화하는 것은 객체의 자율성을 높이고 협력을 단순하고 유연하게 만든다.
이것이 상태를 캡슐화해야하는 이유

객체란 인간의 인지 능력을 이용해 식별 가능한 경계를 가진 모든 사물을 의미. 객체가 식별 가능하다는 것은 객체를 서로 구별할 수 있는 특정한 프로퍼티가 객체 안에 존재한다는 것을 의미. 이 프로퍼티를 식별자라고 함
모든 객체는 식별자를 가지며 식별자를 이용해 객체를 구별할 수 있다. 


식별자란 어떤 객체를 다른 객체와 구분하는 데 사용하는 객체의 프로퍼티다. 값은 식별자를 가지지 않기 때문에 상태를 이용한 동등성 검사를 통해 두 인스턴스를 비교해야 한다. 객체는 상태가 변경될 수 있기 때문에 식별자를 이용한 동일성 검사를 통해 두 인스턴스를 비교할 수 있다.


* 객체의 특성
  - 객체는 상태를 가지며 상태는 변경가능하다.
  - 객체의 상태를 변결시키는 것은 객체의 행동이다.
    - 행동의 결과는 상태에 의존적이며 상태를 이용해 서술할 수 있다.
    - 행동의 순서사 실행 결과에 영향을 미친다.
  - 객체는 어떤 상태에 있더라도 유일하게 식별 가능하다.

쿼리 : 객체의 상태를 조회하는 작업
명령 : 객체의 상태를 변경하는 작업

* 상태를 먼저 결정하고 행동을 나중에 결정하는 방법이 설계에 좋지 않은 영향을 끼치는 이유
  1. 상태를 먼저 결정할 경우 캡슐화가 저해된다.
  2. 객체를 협력자가 아닌 고립된 섬으로 만든다.
  3. 객체의 재사용성이 저하된다.
   

현실세계와 객체지향 세계 사이의 관계를 좀 더 명확하게 설명할 수 있는 단어는 모방이 아니라 은유이다.

* 추상화
  : 어떤 양상, 세부 사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법
  - 복잡성을 다루기 위해 추상화는 두 차원에서 이루어진다
     1. 구체적인 사물들 간의 공통점은 취하고 차이점은 버리는 일반화를 통해 단순하게 만드는 것
     2. 중요한 부분을 강조하기 위해 불필요한 세부 사항을 제거함으로써 단순하게 만드는 것

모든 경우에 추상화의 목적은 복잡성을 이해하기 쉬운 수준으로 단순화하는 것 이라는 점


개념(concept) : 공통점을 기반으로 객체들을 묶기 위한 그릇 

객체란 특정한 개념을 적용할 수 있는 구체적인 사물을 의미한다. 개념이 객체에 적용됐을 때 객체를 개념의 인스턴스라고 한다. 

* 개념의 세 가지 관점
  - 심볼(symbol) : 개념을 가리키는 간략한 이름이나 명칭
  - 내연(intension) : 개념의 완전한 정의를 나타내며 내연의 의미를 이용해 객체가 개념에 속하는지 여부를 확인할 수 있다.
  - 외연(extension) : 개념에 속하는 모든 객체의 집합(set)

분류 : 객체에 특정한 개념을 적용하는 작업. 객체에 특정한 개념을 적용하기로 결심했을 때 우리는 그 객체를 특정한 집합의 멤버로 분류하고 있는 것 

타입은 개념과 동일하다.

* 타입 : 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념을 의미. 어떤 객체에 타입을 적용할 수 있을 때 그 객체를 타입의 인스턴스라고 함. 타입의 인스턴스는 타입을 구성하는 외연인 객체 집합의 일원이 된다.

* 데이터 타입 : 메모리 안에 저장된 데이터의 종류를 분류하는 데 사용하는 메모리 집합에 관한 메타데이터다. 데이터에 대한 분류는 암시적으로 어떤 종류의 연산이 해당 데이터에 대해 수행될 수 있는 지를 결정한다. 

객체를 결정하는 것은 행동이다. 데이터는 단지 행동을 따를 뿐이다. 이것이 객체를 객체답게 만드는 가장 핵심적인 원칙

* 일반화/특수화 관계
일반화/특수화는 행동에 관한 것이다. 일반적인 타입은 특수한 티입에 비해 더 적은 수의 행동을 가지며 특수한 타입은 일반적인 타입에 비해 더 많은 행동을 가진다. 단, 특수한 타입은 일반적인 타입이 할 수 있는 모든 행동을 동일하게 수행할 수 있어야 한다. 
  @ 주의 : 타입의 내연을 의미하는 행동의 가짓수와 외연을 의미하는 집합의 크기는 서로 반대다. 일반화/특수화 관계에서 일반적인 타입은 특수한 타입보다 더 적은 수의 행동을 가지지만 더 큰 크기의 외연 집합을 갖는다. 특수한 타입은 일반적인 타입보다 더 많은 수의 행동을 가지지만 더 적은 크기의 외연 집합을 가진다.

  일반적인 타입을 슈퍼타입(Supertype) / 특수한 타입을 서브타입(Subtype) 이라고 한다.


타입은 추상화다. 타입을 이용하면 객체의 동적인 특성을 추상화할 수 있다. 결국 타입은 시간에 따른 객체의 상태 변경이라는 복잡성을 단순화할 수 있는 효과적인 방법인 것

결국 객체지향에서 중요한 것은 동적으로 변하는 객체의 '상태'와 상태를 변경하는 '행위'다.
클래스는 타입을 구현하기 위해 프로그래밍 언어에서 제공하는 구현메커니즘이라는 사실

* 객체의 책임
  : '객체가 무엇을 알고있는가(knowing)' 와 '무엇을 할 수 있는가(doing)'로 구성

  - 아는 것(knowing)
     - 개인적인 정보에 관해 아는 것
     - 관련된 객체에 관해 아는 것
     - 자신이 유도하거나 계산 할 수 있는 것에 아는 것 
  
  - 하는 것(doing)
     - 객체를 생성하거나 계산을 하는 등의 스스로 하는 것
     - 다른 객체의 행동을 시작시키는 것
     - 다른 객체의 활동을 제어하고 조절하는 것

