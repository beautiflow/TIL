//20220729  자바의 정석 참조변수의 형변환 p.249

class Ex7_7{

public static void main (String args[]) {
    Car car = null; 
    FireEngine fe = new FireEngine();
    FireEngine fe2 null;

    fe.water();
    car = fe;    // car = (Car)fe; 에서 형변환이 생략됨
    //car.water();      <- 컴파일 에러! Car타입의 참조변수로는 water()를 호출할 수 없다.
    fe2 = (FireEngine)car; // 자손타입 <- 조상타입. 형변환 생략 불가
    fe2.water();


   } 
}

class Car{
    String color;
    int door;
     
    void drive(){    // 운전하는 기능 
        System.out.println("drive, Brrrr~");
    }

    void stop(){      // 멈추는 기능
        System.out.println("stop!!!");
    }
}

class FireEngine extends Car {   //소방차
    coid water(){   // 물을 뿌리는 기능 
        System.out.println("water!!!");
    }
}


----------------------------------------------------------------------

     /* instanceof 연산자 */

// - 참조 변수의 형변환 가능여부 확인에 사용. 가능하면 true 반환
// - 형변환 전에 반드시 instanceof로 확인해야 함.

void doWork(Car c){
    if(c instanceof FireEngine){  // 1. 형변환이 가능한지 확인
        FireEngine fe = (FireEngine)c;   // 2. 형변환
        fe.water();
        ...
    }
}

// 형변환을 하는 이유는 인스턴스의 원래 기능을 모두 사용하려고.
// Car타입의 리모콘인 c로는 water()를 호출할 수 없으니까.
// 리모콘을 FireEngine 타입으로 바꿔서 water()를 호출.

참조변수가 참조하고 있는 인스턴스의 실제 타입을 알아보기 위해 사용한다.
주로 조건문에 사용되며, instanceof 의 왼쪽에는 참조변수를 오른쪽에는 타입(클래스명)이 피연산자로 위치한다.
그리고 연산의 결과로 true,false 둘 중 하나를 boolean 타입으로 반환한다.

어떤 타입에 대한 instanceof 연산의 결과가 true 라는 것은 검사한 타입으로 형변환이 가능하다는 것을 뜻함
  
// Q. 참조변수의 형변환은 왜 하나?
// A. 참조변수(리모콘)을 변경함으로써 사용할 수 있는 멤버의 갯수를 조절하기 위해서

// Q. instanceof 연산자는 언제사용하나?
// A. 참조변수를 형변환 하기 전에 형변환 가능 여부를 확인할 때


---------------------------------------------------------------------------
/* 매개변수의 다형성 예제 */

class Product{
    int price; // 제품의 가격
    int bonusPoint; // 제품구매 시 제공하는 보너스 점수

    Product(int price) {
        this.price = price;
        bonusPoint = (int)(price/10.0);  // 보너스 점수는 제품가격의 10%
    }
}

class Tv1 extends Product{
    Tv1 (){
        // 조상클래스의 생성자 Product(int price)를 호출한다.
        super(100);  //Tv의 가격을 100만원으로 한다.
    }

    //Object클래스의 toString()을 오버라이딩한다.
    public String toString(){ return "Tv";}
}

class Computer extends Product{
    Computer(){super(200);}

    public String toString(){return "Computer";}
}

class Buyer {// 고객, 물건을 사는 사람
    int money = 1000; // 소유금액
    int bonusPoint = 0; // 보너스 점수

    void buy(Product p){
        if (money < p.price){
            System.out.println("잔액이 부족하여 물건을 살 수 없습니다.");
            return;
        }

        money -= p.price;   // 가진 돈에서 구입한 제품의 가격을 뺀다.
        bonusPoint += p.bonusPoint;  // 제품의 보너스 점수를 추가한다.
        System.out.println(p + "을/를 구입하셨습니다.");
    }
}

class Ex7_8{
    public static void main(String[] args){
        Buyer b = new Buyer();

        b.buy(new Tv1());
        b.buy(new Computer());

        System.out.println("현재 나믄 돈은 " + b.money + "만원입니다.");
        System.out.println("현재 보너스 점수는 " + b.bonusPoint + " 점입니다.");

    }
}

------------------------------------------------------------------------------

/* 여러 종류의 객체를 배열로 다루기 예제 */

class Product2{
    int price;        // 제품의 가격
    int bonusPoint;   // 제품구매 시 제공하는 보너스 점수

    Product2(int price){
        this.price = price;
        bonusPoint = (int)(price/10.0);
    }

    Product2(){}  // 기본생성자
}

class Tv2 extends Product2{   // <- 조상클래스의 생성자, Product2(int price)를 호출한다.
    Tv2(){super(100);}

    public String toString(){ return "Tv";}
}

class Computer2 extends Product2{
    Computer2{super(200);}
    public String toString() {return "Computer";}
}

class Audio2 extends Product2{
    Audio2() {super(50);}
    public String toString(){ return "Audio";}
}

class Buyer2{              // 고객, 물건을 사는 사람
    int money = 1000;      // 소유금액
    int bonusPoint = 0;    // 보너스 점수
    Product2[] cart = new Product2[10];  // 구입한 제품을 저장하기 위한 배열
    int i = 0;             // Product배열에 사용될 카운터

    void buy(Product2 p){
        if(money < p.price){
            System.out.println("잔액이 부족하여 물건을 살 수 없습니다.");
            return;
        }

        money -= p.price;            // 가진 돈에서 구입한 제품의 가격을 뺀다.
        bonusPoint += p.bonusPoint;  // 제품의 보너스 점수를 추가한다.
        cart[i++] = p;               // 제품을 Product[] cart에 저장한다.
        System.out.println(p+ "을/를 구입하셨습니다.");
    }

    void summary(){           // 구매한 물품에 대한 정보를 요약해서 보여준다.
        int sum = 0;          // 구입한 물품의 가격 합계
        String itemList = ""; // 구입한 물품목록
    
        // 반복문을 이용해서 구힙한 물품의 총 가격과 목록을 만든다.
        for(int i=0; i<cart.length; i++){
            if(cart[i]==null) break;
            sum += cart[i].price;
            itemList += cart[i] + ", ";
        }
        System.out.println("구입하신 물품의 총금액은" + sum + "만원입니다.");
        System.out.println("구입하신 제품은" + itemList + "입니다.");
    }
}

class Ex7_9{
    public static void main(String[] args) {
        Buyer2 b = new Buyer2();

        b.buy(new Tv2());
        b.buy(new Computer2());
        b.buy(new Audio2());
        b.summary();
        
    }
}

