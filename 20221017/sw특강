# 10/17

한기용, CTO, Grepp USA : 급변하는 세상에서 커리어란

대기업이냐 아니냐가아니라 성장할 수 있는 회사냐 아니냐로 분간하는게 중요

어떤 사람들과 같이 일을 하느냐 중요

평생직장이 있던 시절에는 커리어는 사다리라는 말이 맞을 수도 있음

요즘은 커리어는 정글짐이라는 표현이 적절할지도 - 다양한 방향성, 다른 역할(리드 역할, 매니저 역할) 시도 해보기

변화를 두려워하지 않으면서 호기심을 가지고 하는 사람이 전문성을 가진 사람이 아닐까 생각

결과를 내는 데 집중하기

- 성취하는 경험하기 - 회사 바꾼 기준 : 배우는게 없을 때, 매니저가 좋지 않을 때 / 회사를 그만두는게 아니라 매니저를 떠난다 힘든데 많이 배우는 상황과 그냥 힘든 순간인지 잘 판단하는 것이 중요 / 자신에게 충실한 결정을 내리자
- Working backwards -  아마존 책 신문에 어떻게 기사가 날까 한 단계 씩 뒤로 생각하는 방법 / 어떤 결과를 낼 것인지 부터 생각 / 결정권자와 소통을 통해 맞는 결과부터 정의 - 의사소통 능력의 중요성(자기검열 안하기)
- Done is better than perfect - 시간은 유한 모든일을 완벽하게 하려하지 말고 중요한 일을 끝내는게 더 좋을지도 / 시니어 우선순위를 따져서 일을 진행시킬 수 있는 능력  / 완료와 완벽의 균형을 잘 이룰 수 있어야 함 / 전술과 전략 : 내 장점을 인지하고 장점이 단점이 되는지 안되는지 아는 것 중요

나의 성장을 저해하는 요소

- 나이 혹은 남과의 비교
- 나에 대한 고정관념(vs. growth mindset)
- 과거의 상처 - 일, 프로젝트를 하면서 사람들과의 상처 / 나이와 현명함의 관계 / 상처를 인지하는 것

인격적인 성숙

- 긍정적인 태도 - 팀웍 vs. Brilliant Jerk
- 회고하는 자세
- 실수를 인정하는 여유

시작과 꾸준함의 중요성 - 복리가 있는 일 하기

- 아무 일도 하지 않으면 아무런 일도 발생하지 않음 : 시작이 반
- Practice Makes Perfect - 꾸준히 매일 하다보면 발전하는게 조금더 오랜시간을 두고 보임
- 복리가 있는 일들 : 운동, 배움/학습(호기심), 네트워킹(사람 만나기), 책읽기/글쓰기

 

네트워크의 중요성

- 사람들을 만날 때 호기심 갖기 : 첫 인상에 사로잡히지 않기
- 좋은 평판 유지하기 - Pay It Forward
- 좋은 사람들과 일하기

자신의 강점과 약점을 이해하기

- 강점을 최대화하는 일을 찾기
- 단, 내 강점이 약점이 되는 순간이 있는데 그걸 잘 인지하기 - Peter’s principle : 사람들은 일반적으로 무능해 질 때까지 승진함(혹은 성장함)
- 인지는 해야하지만 꼭 변화할 필요는 없음

사기증후군(Imposter Syndrome) 극복하기

- 자신감 갖기. 남과 비교하지 않고 어제의 나와 오늘의 나를 비교하기

         -  어떻게 자신감을 쌓을 수 있을지 고민

### 개발자 커리어 성장

기본기 확실히 하기

- 코딩(프로그래밍 언어) - 다룰 수 있는 언어 1개 이상
- 테스트 작성 - 버그가 적을 수 있도록 / 테스트 잘 작성하는 것 중요 / CICD
- 기본 툴들의 자유로운 사용 - 소스 컨트롤, 소스 에디터

학습능력 키우기

- 호기심 기반으로 학습 - 미래에 대한 불안감으로 학습하지 말자, 현재에 충실하자
- 나만의 새로운 주제 학습 방법 만들기 - 돈과 시간 교환하기, 필요한 만큼만 알기

(우선 순위 고려) 결과 내기에 집중

- 컨텍스트 이해하고 성공실패 지표 확인

          - 매니지먼트와의 소통 중요

          - 프로젝트 혹은 태스크 소용 시간 추정 훈련하기

- 한번에 끝낼 생각하지말고 여러번 돌릴 생각하자 / Waterfall vs. Iterations / 여러번 돌리면서 확인하면서 더 좋은 방법이 나올 수 있도록 / 적당한 선에서 완료할 수 있어야 함, 완벽주의가 때로는 해가 될 수 있음
- 혼자서 잘하기 << 영향력 갖기 (리드, 매니저) / 처음부터 잘하는 사람 없다. 너무 빨리 포기하지 말자. 연습하다보면 잘해짐.
- 뜨는 기술 습득하기 << 필요한 지식 습득하는 경험

소통 잘하기

- 혼자 개발을 잘하는 모드 → 팀으로 일하는 모드로 발전
- 발표 훈련하기 - 내가 전달하고 싶은 메시지, 청중이 원하는 메시지가 무엇인지 잘 결합

운영을 고려한 코드 작성

- 특히 내가 만든 코드를 남이 운영하는 경우 더 중요
- 반복되는 일을 자동화하기 - ex) 같은 일이 3번째 반복되면 점전적인 자동화 시작 / 부지런한 사람들이 경계해야 할 것 : 노가다의 숙달화


