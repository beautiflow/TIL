//20220730 자바의 정석 p.257 ~

  /* 추상클래스(abstract class) */
  - 미완성 설계도. 미완성 메서드를 갖고 있는 클래스

  abstract class Player{ // 추상클래스(미완성 클래스)
      abstract void play(int pos);  //추상메서드 (몸통{}이 없는 미완성 메서드)
      abstract void stop();   // 추상메서드
  }

  - 다른 클래스 작성에 도움을 주기 위한 것. 인스턴스 생성 불가
     Player p = new Player();  // 에러. 추상 클래스의 인스턴스 생성 불가 


  - 상속을 통해 추상 메서드를 완성해야 인스턴스 생성 가능
  
  class AudioPlayer extends Player {
      void paly(int pos){/* 내용 생략 */}  // 추상메서드를 구현
      void stop(){/* 내용 생략 */}  // 추상메서드를 구현
  }

  AudioPlayer ap = new AudioPlayer();  // OK. 

  ---------------------------------------------------------------------------

  /* 추상 메서드(abstract method) */
- 미완성 메서드. 구현부(몸통{})가 없는 메서드 / 메서드 = 선언부 + 구현부{}

/* 주석을 통해 어떤 기능을 수행할 목적으로 작성하였는지 설명한다. */
abstract 리턴타입 메서드 이름();

- 꼭 필요하지만 자손마다 다르게 구현될 것으로 예상되는 경우

abstract class Player{     // 추상클래스(미완성 클래스, 미완성 설계도)
    abstract void play(int pos);  // 추상메서드(미완성 메서드)
    abstract void stop();         // 추상메서드(선언부만 있고 구현부 {} 가 없는 메서드)
}

// 추상클래스는 상속을 통해 완성해야 객체 생성 가능

class AudioPlayer extends Player{
    void play(int pos){/*내용 생략 */} // 추상메서드를 구현
    void stop(){/* 내용 생략 */} // 추상메서드를 구현
}

- 추상메서드 호출 가능 (호출할 때는 선언부만 필요)

abstract class Player{
    boolean pause;  // 일시정지 상태를 저장하기 위한 변수
    int currentPos; // 현재 Play되고 있는 위치를 저장하기 위한 변수

    Player(){ //추상 클래스도 생성자가 있어야 한다.
        pause = false;
        currentPos = 0;
    }
        /* 지정된 위치(pos)에서 재생을 시작하는 기능이 수행하도록 작성하여야 한다. */

abstract void paly(int pos);  // 추상메서드
   /* 재생을 즉시 멈추는 기능을 수행하도고 작성하여야 한다. */
abstract void stop();  // 추상메서드

 void play(){
    play(currentPos);  // 추상메서드를 사용할 수 있다.
 }


 --------------------------------------------------------------------------

 /* 추상클래스의 작성 */
 - 여러 클래스에 공통적으로 사용될 수 있는 추상클래스를 바로 작성하거나 기존클래스의 공통 부분을 뽑아서
    추상클래스를 만든다.

    public class Ex7_10{
        public static void main(String[] args){
            Unit[] group = { new Marine(), new Tank(), new Dropship()};

            for(int i = 0; i < group.length; i++)
               group[i].move(100,200);
        }
    }

    abstract class Unit{
        int x, y;
        abstract void move(int x, int y);
        void stop(){/* 현재 위치에 정지 */}
    }

    class Marine extends Unit{// 보병
       void move(int x, int y){
        System.out.println("Marine[x=" + x +" , y=" + y _+"]");
        }
        void stimPack(){/* 스팀팩을 사용한다. */}
    }
    
     class Tank extends Unit{// 탱크
         void move(int x, int y){
            System.out.println("Tank[x=" +x+", y= " + y +"]");
         }
         void changeMode(){/* 공격모드를 변환한다. */}
    }

    class Dropship extends Unit{// 수송선
      void move(int x, int y){
        System.out.println("Dropship[x=" +x+", y= " +y+"]");
      }
      void load(){/* 선택된 대상을 태운다. */}
      void unload(){/* 선택된 대상을 내린다 */}
    }


-----------------------------------------------------------------------------

/* 인터페이스(interface) */
- 추상메서드의 집합  
- 구현된 것이 전혀 없는 설계도. 껍데기(모든 멤버가 public)

interface 인터페이스이름 {
    public static final 타입 상수이름 = 값;
    public abstract 메서드이름(매개변수목록);
}

- 일반적인 클래스와 달리 인터페이스의 멤버들은 다음과 같은 제약사항이 있다.
   * 모든 멤버변수는 public static final 이어야 하며, 이를 생략할 수 있다.
   * 모든 메서드는 public abstract 이어야 하며, 이를 생략할 수 있다.
      단, static 메서드와 디폴트 메서드는 예외(JDK1.8부터)

/* 인터페이스의 상속 */

- 인터페이스의 조상은 인터페이스만 가능(Object가 최고 조상 아님)
- 다중 상속이 가능.(추상메서드는 충돌해도 문제 없음)


/* 인터페이스의 구현 */
- 인터페이스에 정의된 추상 메서드를 완성하는 것

class 클래스이름 implements 인터페이스 이름{
    // 인터페이스에 정의된 추상메서드를 모두 구현해야 한다.
}


class Fighter implements Fightable{
    public void move(int x, int y){/* 내용 생략 */}
    public void attack(Unit u){/* 내용 생락 */}
}

// 이때 'Fighter 클래스는 Fightable 인터페이스를 구현한다.'라고 한다.


// 일부만 구현하는 경우, 클래스 앞에 abstract를 붙여야 함.

abstract class Fighter implements Fightable{
    public void move(int x, int y){/* 내용 생략 */}
}

Q. 인터페이스란?
A. 추상메서드의 집합

Q. 인터페이스의 구현이란?
A. 인터페이스의 추상메서드 몸통{} 만들기 (미완성 설계도 완성하기)

Q. 추상클래스와 인터페이스의 공통점은?
A. 추상메서드를 가지고 있다(미완성 설계도)

Q. 추상클래스와 인터페이스의 차이점은?
A. 인터페이스는 iv를 가질 수 없다.


---------------------------------------------------------------------------

