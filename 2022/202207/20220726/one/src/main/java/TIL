04 : 키보드 입력과 로깅

 ** 표준 입출력
 : 입출력 장치는 다양하게 있을 수 있으며 자바에는 가장 기본이 되는 입력장치와 출력장치를 표준 입출력 장치로 정의하고 있다.
 : 키보드는 표준입력 장치로 System.in 으로 정의 되어 있으며 표준 출력의 경우 System.out 로 정의되어 있다.
 : 이들 객체는 각각 java.io.InputStream, java.io.PrintStream 클래스의 인스턴스이다.

 ** java.util.Scanner
 : Scanner 클래스는 입력 스트림으로부터 데이터를 읽어오기 위한 유틸리티 클래스이다. 스트림은 데이터 입출력을 위한 일종의 통로로 파일과 연결된 스트림을 사용하면
   파일로부터 데이터를 읽을 수 있고 네트워크와 연결된 스트림을 사용하면 네트워크 통신을 통해 데이터를 읽을 수 있는 개념이다.

   사용하기 전에 java.util 패키지를 import 해주어야 한다.

   #기본 사용법

   Scanner scan = new Scanner(System.in);
   String name = scan.next();
   int num = scan.nextInt();


       - Scanner 객체 생성시 입력 스트림을 지정할 수 있음 (키보드 이외 파일이나 네트워크도 가능)
       - 입력값을 문자열로 반환하는 next()를 비롯해 nextByte(),nextInt() 등 데이터 타입에 따른 메서드 존재.
       - 입력값이 공백으로 구분되어 한줄로 입력될 경우 공백을 기준으로 다음 데이터를 찾게 됨.
       - 따라서, 한줄 전체를 문자열 입력으로 처리하려면 nextLine()을 사용해야함.
       - hasNext()는 다음 데이터가 있는지 true/false로 알려줌



    ** 로깅
    : 프로그램에서 기록을 위해 메시지를 남기는 것
          ex) 웹서버의 경우 모든 사용자의 접속 데이터를 서버로그로 저장하고 있다.
              또한 프로그램 수행가정에서 발생하는 각종 정보들과 에러 메시지들도 참고를 위해 모두 기록된다.

       지금까지 예제에서 프로그램 동장을 확인하기 위해 System.out.println() 을 사용해 왔다.
       이는 콘솔에 메시지를 출력하는 것으로 실제 우리가 사용하는 프로그램들을 GUI를 통해 화면에 메시지가 출력되므로
       System.out.println()을 사용할 일이 없다.

       프로그램의 결과 뿐만 아니라 변수의 값을 확인하거나 상태를 확인하기 위해 System.out.println()을 사용할 수 있다.
       그러나 이렇게 단순하게 출력문을 사용하는 것은 체계적으로 기록을 남기거나 관리하기 어려운 문제가 있다.
          ex) 실제 프로그램 개발에는 로그메시지들을 매일 새로운 파일에 저장하거나 파일의 용량이 일정크기 이상이 되면 다른 파일로 생성하고
               3달이상 지난 로그들은 삭제한다던가 하는 작업들이 필요하게 된다.


   ** 로깅 프레임워크(Logging Framework)
   : 바로 앞의 문제점들을 해결하기 위한 소프트웨어 / log4j, slf4j, logback 등이 유명하다.
     로거(Logger)라고도 한다.

         - log4j : 가장 오래되고 많은 사용자를 가지고 있으며 다양한 설정을 통해 통합관리가 가능
         - logback : log4j를 기반으로 빠른 속도로 log4j를 대체해 나가고 있음
         - slf4j : 그 자체로 로거는 아니고 다른 로거와 결합해 사용할 수 있는 일종의 표준규격 로깅 API성격
         - JDK 기본 로거 : 기본 API라는 점에서 편리하기는 하지만 실제 프로젝트에서는 거의 사용되지 않음.

              cf)Application Programming Interface(애플리케이션 프로그램 인터페이스)의 줄임말입니다.
                 API의 맥락에서 애플리케이션이라는 단어는 고유한 기능을 가진 모든 소프트웨어를 나타냅니다.
                 인터페이스는 두 애플리케이션 간의 서비스 계약이라고 할 수 있습니다. 이 계약은 요청과 응답을 사용하여
                 두 애플리케이션이 서로 통신하는 방법을 정의합니다. API 문서에는 개발자가 이러한 요청과 응답을 구성하는
                 방법에 대한 정보가 들어 있습니다.


  ** java.util.logging
  : 자바에서 기본으로 제공되는 로깅 라이브러리
  : 기본적으로 로그 메시지들은 다으모가 같이 레벨에 따른 의미를 가지고 있어 로그를 남길때 적절하게 선택해 사용해야 한다.
  : 로그 레벨은 로깅 프레임워크에 따라 조금씩 다를 수 있다.

          - SEVERE : 가장 심각한 레벨로 시스템에 문제가 발생한 경우 사용
          - WARNING : 문제를 발생시킬수도 있는 잠재적 문제 발생시 사용
          - INFO : 정보성 메시지로 실행기록, 입력값 확인 등에 사용
          - CONFIG : 프로그램의 설정관련 메시지
          - FINE : 개발자 레벨로 로거에 따라 DEBUG 레벨로 취급되기도 함. 프로그램 분석들을 위한 정보 출력에 사용
          - FINER : 비교적 상세한 Trace 메시지로 특정 함수나 클래스 진입, 리턴 등에 대한 정보가 포함됨
          - FINEST : 가장 상세한 Trace 메시지로 시스템의 정보나 송수신된 메시지 전문등